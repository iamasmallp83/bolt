plugins {
    id 'java'
    id 'application'
}

dependencies {
    implementation project(':bolt-schema')

    implementation "com.lmax:disruptor:${versions.disruptor}"
    implementation "io.aeron:aeron-driver:${versions.aeron}"
    implementation "io.aeron:aeron-client:${versions.aeron}"
    
    // Prometheus 监控
    implementation "io.prometheus:simpleclient:${versions.prometheus}"
    
    // SLF4J 日志
    implementation "org.slf4j:slf4j-api:1.7.36"
    implementation "ch.qos.logback:logback-classic:1.2.12"
    
    // JSON 处理
    implementation "com.fasterxml.jackson.core:jackson-databind:2.15.2"
    
    // gRPC 和 Protobuf 依赖现在通过 bolt-schema 项目提供

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
}

application {
    mainClass = 'com.cmex.bolt.Bolt'
}

// 常规测试任务 - 排除性能测试标签
test {
    useJUnitPlatform {
        excludeTags 'performance'
    }
    
}

tasks.register('performance', Test) {
    group = 'performance'

    useJUnitPlatform {
        includeTags 'performance'
    }

    // 高性能测试的专用JVM配置 - 优化版
    jvmArgs = [
            // 内存配置
            '-Xmx4g',                    // 增加堆内存到6GB
            '-Xms4g',                    // 预分配堆内存
            '-XX:MaxDirectMemorySize=4g', // 增加直接内存
    ]

    // 设置测试超时（性能测试需要更长时间）
    systemProperty 'junit.jupiter.execution.timeout.default', '600s'

}

tasks.register('fatJar', Jar) {
    archiveFileName = 'bolt-spot-all-in-one.jar'
    manifest {
        attributes 'Main-Class': 'com.cmex.bolt.spot.SpotServer'
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}