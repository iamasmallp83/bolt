plugins {
    id 'java'
    id 'application'
}

dependencies {
    implementation project(':bolt-spot-proto')
    
    implementation "com.lmax:disruptor:${versions.disruptor}"
    implementation "org.javolution:javolution-core-java:${versions.javolution}"
    implementation "io.aeron:aeron-driver:${versions.aeron}"
    implementation "io.aeron:aeron-client:${versions.aeron}"

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
}

application {
    mainClass = 'com.cmex.bolt.spot.SpotServer'
}

// 常规测试任务 - 使用默认内存配置
test {
    useJUnitPlatform()
    
    // 排除性能测试类，避免普通测试时消耗大量内存
    exclude '**/*OrderPerformanceTestWithHTMLReport*'
}

// 专门的性能测试任务 - 只对OrderPerformanceTestWithHTMLReport生效
task performanceTest(type: Test) {
    group = 'verification'
    
    useJUnitPlatform()
    // 使用filter来指定测试类
    filter {
        includeTestsMatching "com.cmex.bolt.spot.performance.OrderPerformanceTestWithHTMLReport"
    }
    
    // 高性能测试的专用JVM配置
    jvmArgs = [
        '-Xmx8g',           // 最大堆内存8GB
        '-Xms8g',           // 初始堆内存4GB
        '-XX:MaxDirectMemorySize=4g',  // 最大直接内存4GB
        '-XX:+UseG1GC',     // 使用G1垃圾收集器
        '-XX:+UseStringDeduplication',  // 启用字符串去重
        '-XX:+UnlockExperimentalVMOptions'
    ]
    
    // 设置测试超时（性能测试需要更长时间）
    systemProperty 'junit.jupiter.execution.timeout.default', '600s'
    
}

task fatJar(type: Jar) {
    archiveFileName = 'bolt-spot-all-in-one.jar'
    manifest {
        attributes 'Main-Class': 'com.cmex.bolt.spot.SpotServer'
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}