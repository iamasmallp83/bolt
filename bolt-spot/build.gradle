plugins {
    id 'java'
    id 'application'
}

dependencies {
    implementation project(':bolt-spot-proto')
    
    implementation "com.lmax:disruptor:${versions.disruptor}"
    implementation "org.javolution:javolution-core-java:${versions.javolution}"
    implementation "io.aeron:aeron-driver:${versions.aeron}"
    implementation "io.aeron:aeron-client:${versions.aeron}"

    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"
    
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
}

application {
    mainClass = 'com.cmex.bolt.spot.SpotServer'
}

tasks.withType(Test) {
    useJUnitPlatform()
    jvmArgs '-Xms4g', '-Xmx8g', '-XX:MaxDirectMemorySize=4g'
}

tasks.register('specificTest', Test) {
    // 继承默认的测试配置
    classpath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntimeClasspath
    testClassesDirs = sourceSets.test.output.classesDirs
    // 设置特定 JVM 参数
    jvmArgs '-Xms32g', '-Xmx32g', '-XX:MaxDirectMemorySize=4g', '-XX:+UseG1GC'
    include 'com/cmex/bolt/spot/performance/OrderPerformanceTestWithHTMLReport'
}


task fatJar(type: Jar) {
    archiveFileName = 'bolt-spot-all-in-one.jar'
    manifest {
        attributes 'Main-Class': 'com.cmex.bolt.spot.SpotServer'
    }
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}