plugins {
    id 'java-library'  // 这个插件提供 api() 方法
    id 'com.google.protobuf' version '0.9.4'
}

dependencies {
    api "io.grpc:grpc-netty-shaded:${versions.grpc}"
    api "io.grpc:grpc-protobuf:${versions.grpc}"
    api "io.grpc:grpc-stub:${versions.grpc}"
    api 'org.capnproto:runtime:0.1.5'
    compileOnly "org.apache.tomcat:annotations-api:${versions.annotationsApi}"

    testImplementation "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.junit}"
}


tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.60.1"
        }
    }
    generateProtoTasks {
        all().configureEach { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}


// Cap'n Proto 编译任务
tasks.register('generateCapnp', Exec) {
    description = '编译Cap\'n Proto schema文件生成Java代码'
    group = 'build'

    // Cap'n Proto 文件的源目录
    def capnpSrcDir = file('src/main/capnp')
    // 生成 Java 代码的输出目录 - 修正为标准Maven目录结构
    def outputDir = file('build/generated/source/capnp/main/java')

    //输入输出声明
    inputs.dir capnpSrcDir
    outputs.dir outputDir

    // 确保输出目录存在
    doFirst {
        delete outputDir
        outputDir.mkdirs()

        // 获取所有 .capnp 文件
        def capnpFiles = fileTree(capnpSrcDir).include('**/*.capnp').files
        if (capnpFiles.empty) {
            throw new GradleException("没有找到.capnp文件在 ${capnpSrcDir}")
        }

        // 切换到项目根目录，使用相对路径
        workingDir project.projectDir

        // 构建 capnp 编译命令 - 使用相对路径
        def relativeSrcDir = 'src/main/capnp'
        def relativeFiles = capnpFiles.collect { relativeSrcDir + '/' + it.name }
        commandLine = ['capnp', 'compile', '-ojava:' + outputDir.absolutePath, '--src-prefix=' + relativeSrcDir] + relativeFiles as List<String>

    }

    // 错误处理
    ignoreExitValue = false

    doLast {
        // 移动生成的文件到正确的包路径
        def srcFile = new File(outputDir, 'Bolt.java')
        def targetDir = new File(outputDir, 'com/cmex/bolt/')
        def targetFile = new File(targetDir, 'Envoy.java')
        if (srcFile.exists()) {
            targetDir.mkdirs()
            if (targetFile.exists()) {
                targetFile.delete()
            }
            srcFile.renameTo(targetFile)
        }
    }
}

// 将生成的 Java 代码目录添加到源集
sourceSets {
    main {
        resources {
            exclude '**/*.proto'  // 关键：禁止复制 proto 文件到资源目录
        }
        java {
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs += 'build/generated/source/capnp/main/java'
        }
    }
}

// 确保在 compileJava 任务之前运行编译任务
compileJava.dependsOn generateCapnp,generateProto