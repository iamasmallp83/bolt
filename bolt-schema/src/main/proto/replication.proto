syntax = "proto3";

package com.cmex.bolt.replication;

option java_package = "com.cmex.bolt.replication";
option java_outer_classname = "ReplicationServiceProto";

// 复制服务定义
service ReplicationService {
  // 主节点推送事件批次给从节点
  rpc PushEventBatch(EventBatchRequest) returns (EventBatchResponse);
  
  // 从节点确认批次处理完成
  rpc AcknowledgeBatch(BatchAckRequest) returns (BatchAckResponse);
  
  // 心跳检测
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // 从节点注册
  rpc RegisterSlave(RegisterSlaveRequest) returns (RegisterSlaveResponse);
}

// 事件批次请求
message EventBatchRequest {
  int64 batch_id = 1;
  repeated NexusEvent events = 2;
  int64 sequence_start = 3;
  int64 sequence_end = 4;
  int64 timestamp = 5;
}

// 事件批次响应
message EventBatchResponse {
  bool success = 1;
  string error_message = 2;
}

// 批次确认请求
message BatchAckRequest {
  int64 batch_id = 1;
  string slave_node_id = 2;
  int64 processed_sequence = 3;
  int64 timestamp = 4;
}

// 批次确认响应
message BatchAckResponse {
  bool success = 1;
  string error_message = 2;
}

// 心跳请求
message HeartbeatRequest {
  string slave_node_id = 1;
  int64 timestamp = 2;
}

// 心跳响应
message HeartbeatResponse {
  bool success = 1;
  int64 master_timestamp = 2;
}

// 从节点注册请求
message RegisterSlaveRequest {
  string slave_node_id = 1;
  string slave_host = 2;
  int32 slave_port = 3;
  int64 last_sequence = 4;
}

// 从节点注册响应
message RegisterSlaveResponse {
  bool success = 1;
  string error_message = 2;
  int64 start_sequence = 3;
}

// Nexus事件定义（复用现有的Cap'n Proto定义）
message NexusEvent {
  int64 id = 1;
  int32 partition = 2;
  bytes data = 3;  // Cap'n Proto序列化的数据
}
