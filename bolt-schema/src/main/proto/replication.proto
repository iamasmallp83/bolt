syntax = "proto3";
option java_package = "com.cmex.bolt.replication";
option java_outer_classname = "ReplicationProto";

// 消息类型枚举
enum MessageType {
  REGISTER = 0;      // 注册消息
  HEARTBEAT = 1;     // 心跳消息
  JOURNAL_REPLAY = 2; // Journal重放消息
  BATCH_RELAY = 3; // 批处理中继消息
}

// 复制状态枚举
enum ReplicationState {
  INITIAL = 0;       // 初始状态
  REGISTERED = 1;    // 已注册
  READY = 2;         // 就绪状态，可以正常处理业务
  ERROR = 3;         // 错误状态
}

// 协议头部
message ProtocolHeader {
  int32 magic_number = 1;     // Magic Number: 0x424F4C54 ("BOLT")
  int32 version = 2;          // 协议版本
  MessageType message_type = 3; // 消息类型
  int64 timestamp = 4;        // 时间戳
  int32 data_length = 5;      // 数据长度
}

// 注册消息
message RegisterMessage {
  int32 slave_id = 1;         // 节点ID
}

// 注册响应
message RegisterResponse {
  bool success = 1;           // 是否成功
  string message = 2;        // 响应消息
  int64 server_time = 3;     // 服务器时间
  bytes snapshot = 4; // 快照信息
}


// 心跳消息
message HeartbeatMessage {
  int32 slave_id = 1;        // 节点ID
  int64 timestamp = 2;      // 心跳时间戳
  map<string, string> status = 3; // 状态信息
}

// 心跳响应
message HeartbeatResponse {
  bool success = 1;          // 是否成功
  int64 server_time = 2;     // 服务器时间
}

// 中继消息数据
message RelayMessageData {
    int64 id = 1;                    // 消息ID
    int32 partition = 2;              // 分区ID
    bytes data = 3;                   // 消息数据
}

// 批处理中继消息
message BatchRelayMessage {
    int64 sequence = 1;
    int32 size = 2;
    repeated RelayMessageData messages = 3;
}


// Journal重放消息
message JournalReplayMessage {
  bool is_last_chunk = 1;       // 是否为最后一块
  bytes journal_data = 2;       // Journal数据
}

// 统一的复制请求消息
message ReplicationRequest {
  oneof message {
    RegisterMessage register = 1;             // 注册消息（必须第一个发送）
    HeartbeatMessage heartbeat = 2;           // 心跳消息
    JournalReplayMessage journal = 3;         // Journal重放消息
  }
}

// 统一的复制响应消息
message ReplicationResponse {
  oneof message {
    RegisterResponse register = 1;            // 注册响应
    HeartbeatResponse heartbeat = 2;          // 心跳响应
    JournalReplayMessage journal = 3;         // Journal重放响应
    BatchRelayMessage relay = 4;              // 中继消息
  }
}

// 统一的复制服务定义（支持双向通信）
service ReplicationService {

  rpc ReplicationStream(stream ReplicationRequest) returns (stream ReplicationResponse);
  
}
